{"version":3,"sources":["Component/UI/Input/Input.module.css","Container/Auth/Auth.module.css","Container/Auth/Auth.js","Component/UI/Input/Input.js"],"names":["module","exports","Auth","state","authForm","email","elementType","elementConfig","type","placeholder","validation","required","valid","touched","value","password","minLength","formIsValid","isSignUp","inputOnChangeHandler","event","inputId","myFormIsValid","myForm","inputEl","target","isValidChecker","setState","switchButtonHandler","prevState","onSubmitHandler","preventDefault","props","onSignupAuth","this","building","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","errorMessage","error","message","form","className","classes","onSubmit","map","el","invalid","change","btnType","disabled","clicked","loading","isAuthenticated","to","Component","connect","auth","idToken","burgerBuilder","dispatch","actions","Input","inputElement","inputElementClass","InputElement","Invalid","onChange","options","optEl","displayValue","Label","label"],"mappings":"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","file":"static/js/4.ecbe916d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2JZFx\",\"Label\":\"Input_Label__3YW2y\",\"InputElement\":\"Input_InputElement__1GBWx\",\"Invalid\":\"Input_Invalid__32mjy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1U_MW\",\"Input\":\"Auth_Input__2Egj8\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classes from './Auth.module.css';\r\n\r\nimport Input from '../../Component/UI/Input/Input';\r\nimport Button from '../../Component/UI/Button/Button';\r\nimport Spinner from '../../Component/UI/Spinner/Spinner';\r\nimport * as actions from '../../store/actions/index';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { isValidChecker } from '../../store/utility';\r\n\r\nclass Auth extends Component{\r\n    state = {\r\n        authForm : {\r\n            email : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'email',\r\n                    placeholder : 'Your Email'\r\n                },\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid : false,\r\n                touched : false,\r\n                value : ''\r\n            },\r\n            password : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type : 'password',\r\n                    placeholder : 'Your Password'\r\n                },\r\n                validation : {\r\n                    required : true,\r\n                    minLength : 6\r\n                },\r\n                valid : false,\r\n                touched : false,\r\n                value : ''\r\n            }\r\n        },\r\n        formIsValid : false,\r\n        isSignUp : true\r\n    }\r\n\r\n    inputOnChangeHandler = (event,inputId) => {\r\n        let myFormIsValid = true;\r\n        const myForm = {...this.state.authForm};\r\n        const inputEl = {...myForm[inputId]};\r\n        inputEl.value = event.target.value;\r\n        inputEl.touched = true;\r\n        inputEl.valid = isValidChecker(inputEl.value,inputEl.validation);\r\n        myForm[inputId] = inputEl;\r\n        for(let inputId in myForm){\r\n            myFormIsValid = myForm[inputId].valid && myFormIsValid;\r\n        }\r\n        this.setState({authForm : myForm , formIsValid: myFormIsValid});\r\n    }\r\n\r\n    switchButtonHandler = (event) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignUp: !prevState.isSignUp\r\n            }\r\n        });\r\n    }\r\n\r\n    onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSignupAuth(this.state.authForm.email.value,this.state.authForm.password.value,this.state.isSignUp);\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.building && this.props.authRedirectPath!=='/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const formElementsArray = [];\r\n        for(let key in this.state.authForm){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.authForm[key]\r\n            });\r\n        }\r\n        \r\n        let errorMessage = null;\r\n        if(this.props.error){\r\n            errorMessage = <p>{this.props.error.message}</p>\r\n        }\r\n        \r\n        let form = (<div className={classes.Auth}>\r\n                        {errorMessage}\r\n                        <form onSubmit={this.onSubmitHandler}>\r\n                            {formElementsArray.map(el => (\r\n                                <Input elementType={el.config.elementType} key={el.id} elementConfig={el.config.elementConfig} value={el.config.value} invalid={!el.config.valid} touched={el.config.touched} change={(event) => this.inputOnChangeHandler(event,el.id)}/>\r\n                            ))}\r\n                            <Button btnType='Success' disabled={!this.state.formIsValid}>{this.state.isSignUp?'SIGN UP':'SIGN IN'}</Button>\r\n                        </form>\r\n                        <Button btnType='Danger' clicked={this.switchButtonHandler}>\r\n                            SWITCH TO {this.state.isSignUp?'SIGN IN':'SIGN UP'}\r\n                        </Button>\r\n                    </div>);\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner/>\r\n        }\r\n\r\n        if(this.props.isAuthenticated){\r\n            form = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n\r\n        return form;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading : state.auth.loading,\r\n        error : state.auth.error,\r\n        isAuthenticated : state.auth.idToken !== null,\r\n        building : state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSignupAuth : (email,password,isSignUp) => dispatch(actions.signupAuth(email,password,isSignUp)),\r\n        onSetAuthRedirectPath : () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = props => { \r\nlet inputElement = null;\r\nlet inputElementClass = classes.InputElement;\r\nif(props.invalid && props.touched){\r\n    inputElementClass = inputElementClass + ' ' + classes.Invalid;\r\n}\r\n\r\nswitch(props.elementType){\r\n    case('input'):\r\n        inputElement=<input className={inputElementClass} {...props.elementConfig} onChange={props.change}/>\r\n        break;\r\n    case('textarea'):\r\n        inputElement=<textarea className={inputElementClass} {...props.elementConfig} onChange={props.change}/>\r\n        break;\r\n    case('select'):\r\n        inputElement=<select className={inputElementClass} {...props.elementConfig} onChange={props.change}>\r\n            {props.elementConfig.options.map(optEl => <option value={optEl.value} key={optEl.value}>{optEl.displayValue}</option>)}\r\n        </select>\r\n        break;\r\n    default:\r\n        inputElement=<input className={inputElementClass} {...props.elementConfig} onChange={props.change}/>\r\n        break;\r\n}\r\n\r\nreturn (\r\n<div className={classes.Input}>\r\n    <label className={classes.Label}>{props.label}</label>\r\n    {inputElement}\r\n</div>);\r\n}\r\n\r\nexport default Input;"],"sourceRoot":""}